= Putting Fortran's object-related features to practical use =
{{Short description|Fortran language features and techniques for object-based and object-oriented programming}}This article describes how  advanced Fortran language features can be applied toward object-based and object-oriented programming techniques. These are, of course, to a significant extent a matter of taste, personal style and possibly overarching program design considerations, so should be taken with a pinch of salt. 

Language features from Fortran 95 and later will be used; those from Fortran 2003 and later will also be shortly described. They are explained in more detail in e.g., Metcalf, Reid, Cohen and Bader.<ref>{{cite book |last1=Metcalf |first1=Michael |title=Modern Fortran Explained |last2=Reid |first2=John |last3=Cohen |first3=Malcolm |last4=Bader |first4=Reinhold |publisher=Oxford University Press |year=2023 |isbn=978-0-19-887657-1 |series=Numerical Mathematics and Scientific Computation}}</ref> See also [[Fortran 95 language features]] for the language's fundamentals; the prerequisite for understanding this article is that features explained there are well understood.

Boldface will be used where term definitions are introduced. They are additionally annotated by "(not a Fortran term)" or similar if the term is not used in the Fortran standard itself, but is in general use in the technical literature.

Compilable and runnable example code is available from an external [https://github.com/reinh-bader/object_fortran Github repository].  
== Object-based programming techniques ==

=== Introduction: Container-like types ===
The word "Container-like" is not a Fortran term, but used in the context of this article to designate types with components whose size (or type, to be discussed later) is not known when the type is declared. For deferred sizing of array objects, this can be achieved by using either the <code>POINTER</code> or the <code>ALLOCATABLE</code> attribute for the component's specification. 

The language features and programming techniques will be shown using two examples introduced in the following section. The demonstration codes for this chapter can be found in the <code>object_based</code> folder of the [https://github.com/reinh-bader/object_fortran Github repository].  

=== Examples for definitions of container-like types ===

==== Allocatable components ====

As an example for the type definition of a '''value container''' (not a Fortran term) with an <code>ALLOCATABLE</code> component consider<syntaxhighlight lang="fortran">
TYPE :: polynomial
   PRIVATE
   REAL, ALLOCATABLE :: a(:)
END TYPE
</syntaxhighlight>An object declared to be of this type <syntaxhighlight lang="fortran">
TYPE(polynomial) :: p
</syntaxhighlight>is suitable for characterization of a polynomial

<math>p(x) = \sum_{k=0}^{degree} a_{k} \cdot x^k \quad (x \in \Re)
</math>

once it has been created and subsequently supplied with values of the coefficients:<syntaxhighlight lang="fortran">
degree = ...  ! integer value known at run time only
ALLOCATE( p%a(0:degree) )
p%a(0:) = ...
</syntaxhighlight>

==== Pointer components ====
As an example for the type definition of a '''reference container''' (not a Fortran term) with a <code>POINTER</code> component consider<syntaxhighlight lang="fortran">
TYPE :: sorted_list
   PRIVATE
   TYPE(sortable) :: data
   TYPE(sorted_list), POINTER :: next => null()
END TYPE
</syntaxhighlight>Note that referencing the type itself when declaring a component is permitted if that component has the <code>POINTER</code> or <code>ALLOCATABLE</code> attribute; such types are generally known as '''recursive'''. They are used to represent information structures (lists, trees, ...), often with specific relationships between the individual data entries stored in each node. In this example, the assumption is that entries of type <code>data</code> in subsequent list items fulfill an ordering condition, based on the functionality supplied with that type:  <syntaxhighlight lang="fortran">
TYPE, PUBLIC :: sortable
   CHARACTER(len=:), ALLOCATABLE :: string
END TYPE
   
INTERFACE OPERATOR(<)         ! compare two objects of type sortable
   MODULE PROCEDURE less_than ! implementation not shown here
END INTERFACE
</syntaxhighlight><small>Given that Fortran supports arrays, use of simple linked lists is in most cases inappropriate. The example is presented here as being the simplest that permits illustrating the language features of interest.</small>     

An object declared to be  <syntaxhighlight lang="fortran">
TYPE(sorted_list) :: my_list
</syntaxhighlight>is suitable as starting point for building a linked list with node entries of type <code>data</code>. In the simplest case, inserting a data item into the object is done by executing the following statements:<syntaxhighlight lang="fortran">
TYPE(sortable) :: my_data
:
my_data = ...
my_list%data = my_data ! will only compile if type definition is accessible in host
</syntaxhighlight>However, as we shall see below, setting up a complete and valid <code>sorted_list</code> object in a reliable manner needs additional work.

=== Constructing objects of container-like type ===
The semantics of the default structure constructor for container-like objects needs to account for any additional <code>POINTER</code> or <code>ALLOCATABLE</code> attribute specified for type components. 

For the first example type from the last section, the executable statements in<syntaxhighlight lang="fortran">
TYPE(polynomial) :: q, r
:
q = polynomial( [2., 3., 1.] )
r = polynomial( null() )
</syntaxhighlight>result in an object <code>q</code> auto-allocated to the value <code>q%a(1:3) == [ 2., 3., 1.]</code>, and an object <code>r</code> with <code>r%a</code> unallocated.    

For the second example type from the last section, the executable statements in <syntaxhighlight lang="fortran">
TYPE(sorted_list) :: sl1
TYPE(sorted_list), target :: sl2
TYPE(sortable) :: d1, d2
:
sl1 = sorted_list( data=d1, next=sl2 )  ! use keyword notation
sl2 = sorted_list( d2, null() )
</syntaxhighlight>result in an object <code>sl1</code> with <code>sl1%next</code> pointer associated with <code>sl2</code>, and an object <code>sl2</code> with <code>sl2%next</code> disassociated; the <code>data</code> components of both objects have values, <code>d1</code> and <code>d2</code>, respectively. Note that an argument that matches with a <code>POINTER</code> component must have either the <code>POINTER</code> or the <code>TARGET</code> attribute. Also, '''keyword''' '''notation''' can be used in structure constructors in the same manner as for procedure arguments.

The default constructor's behaviour has some properties that one needs to be aware of:

# If all type components have the <code>PRIVATE</code> attribute i.e., the type is '''opaque''' (not a Fortran term), it can only be used if the type declaration is accessed by host association (this is the same as for nonallocatable/nonpointer components);
# especially for container-like types, its semantics may be incompatible with the programmers intentions for how the objects should be used.

Item 2 is illustrated by the above object setups, specifically:

* In the <code>polynomial</code> example given above, the lower bound of <code>q%a</code> is set to 1, contrary to the expectation that it should be 0. One could account for this by calculating index offsets in any module procedures that process <code>polynomial</code> objects, but this makes the code harder to understand and maintain. Also, the degree of the polynomial should be determined by the last nonzero entry of the coefficient array, but the language can of course not be aware of this.
* In the <code>sorted_list</code> example given above, the ordering requirement for entries in subsequent nodes is not checked, so will usually be not fulfilled. Also, if <code>sl2</code> goes out of scope before <code>sl1</code> does, the list structure is torn to bits.

The programmer can enforce appropriate semantics by overloading the structure constructor. In this case, it is usually a good idea to declare the types as being opaque. 

Overloading the structure constructor is done by 

* creating a named interface (i.e., a generic function) with the same name as the type of interest;
* creating at least one specific function (a subroutine is not permitted), usually returning a scalar result of the type of interest.

For the <code>polynomial</code> type the interface block (placed in the specification section of the module containing the type definition) might read<syntaxhighlight lang="fortran">
INTERFACE polynomial 
! overload to assure correct lower bound when creating a polynomial object
   MODULE PROCEDURE :: create_polynomial
   ... ! further specifics as needed
END INTERFACE
</syntaxhighlight>and the implementation of <code>create_polynomial</code> (in the <code>CONTAINS</code> part of the module) might read<syntaxhighlight lang="fortran">
PURE TYPE(polynomial) FUNCTION create_polynomial(a)
   REAL, INTENT(in) :: a(0:)  
      
   INTEGER :: degree(1)
      
   degree = findloc( a /= 0.0, value=.true., back=.true. ) - 1
   ALLOCATE( create_polynomial%a(0:degree(1)) )
   create_polynomial%a(0:) = a(0:degree(1))  
END FUNCTION
</syntaxhighlight>Because its signature matches the default structure constructor's, the function actually overrides the default constructor, making it generally unavailable.

For the <code>sorted_list</code> type the interface block might read<syntaxhighlight lang="fortran">
INTERFACE sorted_list 
! the default constructor is unavailable because the type is opaque
! the specific has a different signature than the structure constructor
   MODULE PROCEDURE :: create_sorted_list
   ... ! further specifics as needed
END INTERFACE
</syntaxhighlight>with the implementation of <code>create_sorted_list</code> as follows:<syntaxhighlight lang="fortran">
PURE FUNCTION create_sorted_list(item_array) RESULT(head)
   TYPE(sortable), INTENT(in) :: item_array(:)
   TYPE(sorted_list) :: head
      
   INTEGER :: i
    
   DO i = 1, size(item_array)
      CALL add_to_sorted_list(head, item_array(i))
      ! handles tedious details of pointer fiddling
   END DO
END FUNCTION
</syntaxhighlight>The constructor has a signature that differs from that of the default one, but the latter is unavailable outside the host scope of the type definition anyway, due to the opacity of <code>sorted_list</code>.

=== Copying objects of container-like type ===

Default assignment extends to container-like objects. For objects declared as<syntaxhighlight lang="fortran">
TYPE(polynomial) :: p, q
TYPE(sorted_list) :: slp, slq

...  ! code that defines p, slp

</syntaxhighlight>and after defining values for prospective right-hand sides, execution of the statement <syntaxhighlight lang="fortran">
q = p
</syntaxhighlight>produces the same result as<syntaxhighlight lang="fortran">
IF ( allocated(q%a) ) DEALLOCATE( q%a )
q%a = p%a   ! performs auto-allocation using the RHS's bounds, then copies the value
</syntaxhighlight>and execution of the statement<syntaxhighlight lang="fortran">
slq = slp
</syntaxhighlight>produces the same result as <syntaxhighlight lang="fortran">
slq%data = slp%data
slq%next => slp%next   ! creates a reference between list objects without copying any value
</syntaxhighlight>The terms '''deep copy''' and '''shallow copy''' (neither are Fortran terms) are sometimes used to describe the above behaviour for <code>ALLOCATABLE</code> and <code>POINTER</code> components, respectively. Note that - different from the default structure constructor - having <code>PRIVATE</code> components does not affect the use of default assigment. However, the semantics of default assignment might not be what is needed from the programmer's point of view.

Specifically, consider the case where the object <code>slq</code> above has previously been set up by invoking the overloaded constructor. The assignment above would then have the following effects:

# The list elements of the original <code>slq</code>, beginning with <code>slq%next</code>, would become inaccessible ("orphaned"), effectively causing a memory leak;
# after the assignment statement, <code>slq%next</code> references into <code>slp%next</code>, resulting in aliasing.

To avoid 2., it is possible to [[Fortran 95 language features#Derived-data types|'''overload''' the assignment operator]] for reference containers to create a deep copy. Note that in the case where defined unary or binary operations are introduced, the functions that define these need to create deep copies to create the result variable anyway, otherwise things simply don't work. The downside of this is that in code like<syntaxhighlight lang="fortran">
slq = slp // slq
</syntaxhighlight>- with the overloaded concatenation operator meaning that the argument lists are joined - multiple deep copies need to be done (the implementation of the module procedure <code>join_lists</code> that supplies the necessary specific for <code>//</code> is not shown here; see the source <code>code sorted_list.f90</code> for details). It turns out that some of these exist only intermediately.

Here an implementation of the specific procedure for the overloaded assignment of <code>sorted_list</code> objects:<syntaxhighlight lang="fortran">
SUBROUTINE assign_sorted_list(to, from)
   TYPE(sorted_list), INTENT(in), TARGET :: from
   TYPE(sorted_list), INTENT(out), TARGET :: to     ! finalizer is executed on entry, 
                                                    ! see below for discussion of this.
      
   TYPE(sorted_list), POINTER :: p, q
      
   p => from; q => to
      
   deep_copy : DO
      IF ( associated(p) ) THEN
         q%data = p%data
      ELSE
         EXIT deep_copy
      END IF
      p => p%next
      IF ( associated(p) ) ALLOCATE( q%next )
      q => q%next
   END DO deep_copy
END SUBROUTINE
</syntaxhighlight>Avoiding 1. is usually done by means of finalizers, to be discussed in the next section. This is because assignment is not the only possible cause for orphaning of <code>POINTER</code>-related memory (or indeed other resource leaks).

=== Finalization and conclusions ===
To deal with resource leaks that are otherwise not within the programmer's means to avoid, a type definition can be connected with a user-defined '''final procedure''' that is automatically invoked in certain situations. For the <code>sorted_list</code> type, this would look like<syntaxhighlight lang="fortran">
TYPE :: sorted_list
   PRIVATE
   TYPE(sortable) :: data
   TYPE(sorted_list), POINTER :: next => null()
CONTAINS
   FINAL :: delete_sorted_list
END TYPE
</syntaxhighlight>Note that the <code>FINAL</code> statement appears after a <code>CONTAINS</code> statement in the type definition; this implies that <code>delete_sorted_list</code> is not a regular type component. The module procedure's implementation might then be as follows:<syntaxhighlight lang="fortran">
PURE RECURSIVE SUBROUTINE delete_sorted_list(list)
   TYPE(sorted_list), INTENT(inout) :: list
      
   IF ( associated(list%next) ) THEN
      DEALLOCATE( list%next )    ! invokes the finalizer recursively
   END IF
END SUBROUTINE
</syntaxhighlight>It must be a subroutine that takes a single argument of the type to be finalized. Most additional attributes are not permitted for that dummy argument; for the case of finalizing array arguments it is possible to have a set of finalizers (all listed in the type definition), each of which declares the dummy argument with an appropriate rank. 

<small>The <code>PURE</code> and <code>RECURSIVE</code> properties specified above reflect the specific needs for the <code>sorted_list</code> type and its associated procedures. The <code>RECURSIVE</code> specification is optional (i.e., procedures can be called recursively by default), but a <code>NON_RECURSIVE</code> specification can be supplied if the implementation's semantics does not permit correct behaviour in recursive calls.</small>

The finalizer will be automatically invoked on an object if

# it appears on the left-hand side of an intrinsic assignment statement (before the assignment is performed),
# on invocation of a procedure call where it is argument associated with an <code>INTENT(out)</code> dummy,
# it is a non-saved variable and program execution ends its scope, or
# it is deallocated. 

Nonpointer nonallocatable function results fall into the third category above; however, finalization does not apply for the default structure constructor.

Note that if a finalizer is defined and the constructor is overloaded, but the assignment operator is ''not'', then the assignment statement <code>slq = sorted_list(...)</code> (which then translates into a single function call to the <code>create_sorted_list()</code> function shown earlier) will result in a mutilated left-hand side, because the finalizer will be executed on the function that overloads the constructor, resulting in <code>slq%next</code> being disassociated. For this reason, the following guideline applies:
{{Box|Finalizers, overloads for the default constructor, and overload of the assignment operation should usually be jointly implemented.|header=Recommendation|color=lightgreen}}See also the article "[[Rule of three (C++ programming)|Rule of three]]" for the analogous situation in C++.

=== Further language features useful for object-based programming ===

==== Extended semantics for allocatable objects ====
Scalars can have the <code>ALLOCATABLE</code> attribute:<syntaxhighlight lang="fortran">
CHARACTER(len=:), ALLOCATABLE :: my_string
TYPE(sorted_list), ALLOCATABLE :: my_list
</syntaxhighlight>Allocation then can be done explicitly; the following examples illustrate applications of the <code>ALLOCATE</code> statement that are useful or even necessary in this context:<syntaxhighlight lang="fortran">

ALLOCATE( CHARACTER(len=13) :: my_string )                    ! typed allocation
ALLOCATE( my_list, source=sorted_list(array_of_sortable) )    ! sourced allocation

</syntaxhighlight>'''Typed allocation''' is necessary for the string variable, because the length parameter of a string is part of its type; we will later see that derived types can also appear in the type specification. '''Sourced allocation''' permits the creation of an allocated object that is a clone of the specified source object or expression.   

Alternatively, allocatable objects (be they scalar or arrays) can be auto-allocated by appearing on the left-hand side of an ''intrinsic'' assignment statement:<syntaxhighlight lang="fortran">

my_string = "anything goes"  ! auto-allocated to RHS length before value is transferred
! my_list = sorted_list(array_of_sortable)  
! the above statement would fail for an unallocated object, because the assignment 
! has been overloaded using a nonallocatable first dummy argument

</syntaxhighlight>A caveat is that for ''overloaded'' assignment, this will usually not work - either one needs to explicitly allocate the object before assigning to it, or sourced allocation must be used, which bypasses the overloaded assignment.  

Note that for allocatable objects with deferred-size entries (e.g., strings, arrays) a non-conformable left-hand side in an assignment statement will be deallocated before being allocated to the right length or shape, respectively. 

<small>The features discussed in this subsection are also useful for object-oriented programming, with additional semantics applying for the case of polymorphic objects.</small>  

==== Implementing move semantics ====
Sometimes it may be necessary to make use of move instead of copy semantics i.e., create a copy of an object and then getting rid of the original. The simplest way of doing this is to make use of allocatable (scalar or array) objects,<syntaxhighlight lang="fortran">
TYPE(sorted_list), ALLOCATABLE :: my_list, your_list
</syntaxhighlight>After <code>your_list</code> has been set up, the object's content can then be transferred to <code>my_list</code> by using the <code>move_alloc</code> intrinsic, <syntaxhighlight lang="fortran">
CALL move_alloc(your_list, my_list)
</syntaxhighlight>which will deallocate <code>my_list</code> if necessary, before doing the transfer. After the invocation, <code>my_list</code> will have the value formerly stored in <code>your_list</code>, and <code>your_list</code> will end up in the deallocated state. Note that the latter does not involve a regular object deallocation (effectively, a descriptor for the object is moved),  so any existing finalizer will not be invoked. 

==== The <code>BLOCK</code> construct ====

The above rules on finalization imply that variables declared in the specification part of the main program are not finalizable, since they by default have the <code>SAVE</code> attribute. One could argue this is not necessary since all assigned memory is reclaimed when program execution ends. However, excessive memory consumption or the use of other resources may cause issues for reliable program execution. To work around these, the <code>BLOCK</code> construct can be used:<syntaxhighlight lang="fortran">
PROGRAM test_sorted_list
   USE mod_sortable
   USE mod_sorted_list
   IMPLICIT none
   :
   work : BLOCK     
      TYPE(sortable) :: array(items)    
      TYPE(sorted_list) :: my_list, ...
      : ! initialize array  
     
      my_list = sorted_list(array)
      : 
   END BLOCK work  ! finalizer is executed on my_list, ...
   :
END PROGRAM
</syntaxhighlight>The construct (as the only one in Fortran) permits declaration of non-saved variables in its specification part. Their lifetime ends when program execution reaches the <code>END BLOCK</code> statement, and they therefore are finalized at this point, if applicable. Named variables declared outside the construct are accessible inside it, unless a block-local declaration with the same name exists.

<small>Note that the construct's execution flow can be modified by executing an <code>EXIT</code> statement in its body; this can, for example, be used for structured error handling and finally permits sending <code>GO TO</code> to retirement.</small> 

==== The <code>ASSOCIATE</code> construct ====
With the introduction of deeply nested derived types, code that needs access to ultimate components can become quite hard to read. An <code>ASSOCIATE</code> block construct that enables the use of auto-typed aliases can be used. This is illustrated by a procedure that is used to implement the multiplication of two polynomials: <syntaxhighlight lang="fortran">
PURE TYPE(polynomial) FUNCTION multiply_polynomial(p1, p2)
   TYPE(polynomial), INTENT(in) :: p1, p2
      
   INTEGER :: j, l, lmax
      
   lmax = ubound(p1%a,1) + ubound(p2%a,1) 
   ALLOCATE( multiply_polynomial%a(0:lmax) )
   
   ASSOCIATE( a => p1%a, b => p2%a, c => multiply_polynomial%a, &
              jmax => ubound(p1%a,1), kmax => ubound(p2%a,1) ) ! association list
      DO l = 0, lmax
         c(l) = 0
         DO j = max(0, l-kmax), min(jmax, l)
            c(l) = c(l) + a(j) * b(l-j)
         END DO
      END DO
   END ASSOCIATE
END FUNCTION
</syntaxhighlight>              

For the duration of execution of the construct, the associate names can be used to refer to their selectors (i.e., the right-hand sides in the association list). If the selectors are variables, so are the associate names (<code>a</code>, <code>b</code>, <code>c</code> in the above example), and can be assigned to. If the selectors are expressions, so are the associate names (<code>jmax</code>, <code>kmax</code> in the above example).

Associated entities that refer to variables inherit the <code>DIMENSION</code>, <code>CODIMENSION</code>, <code>TARGET</code>, <code>ASYNCHRONOUS</code> and <code>VOLATILE</code> attributes from their selectors, but no others. An associate name can only refer to an <code>OPTIONAL</code> dummy argument if the latter is present.  Associate names can also appear in other block constructs (<code>SELECT TYPE</code>, <code>CHANGE TEAM</code>), which will be discussed where appropriate.

=== Performing I/O with objects of container-like type ===
For objects of container-like type, a data transfer statement <syntaxhighlight lang="fortran">
TYPE(sorted_list) :: my_list

: ! set up my_list
WRITE(*, *) my_list
</syntaxhighlight>would fail to compile, since the run-time library is incapable of dealing with the irregular structures that are hiding behind the innocuous variable. Language features for user-defined derived type I/O ('''UDDTIO''') permit the programmer to control the data transfer in an appropriate manner. This is achieved by binding an I/O statement on a derived-type object to a user-defined procedure, for example through a suitably written named interface:<syntaxhighlight lang="fortran">
INTERFACE WRITE(formatted)
   MODULE PROCEDURE write_fmt_list
END INTERFACE
</syntaxhighlight>Note that this also applies to data types for which the above stand-alone statement is permitted, and then overloads the default I/O mechanism. 

Once the binding is properly defined, the above I/O statement is accepted by the compiler, and  its execution causes the user-defined procedure to be invoked. Therefore it is called the '''parent''' I/O statement. The actual data transfer statements that are issued inside the user-defined procedure are called '''child''' I/O statements.

The following interface variants are permitted, with the obvious interpretation:

* <code>WRITE(formatted)</code>
* <code>READ(formatted)</code>
* <code>WRITE(unformatted)</code>
* <code>READ(unformatted)</code>

The self-defined procedure is restricted with respect to its interfaces' characteristics, which are described in the following:<syntaxhighlight lang="fortran">
SUBROUTINE <formatted_io>    (dtv, unit, iotype, v_list, iostat, iomsg)

SUBROUTINE <unformatted_io>  (dtv, unit,                 iostat, iomsg)

</syntaxhighlight>The placeholders <code><formatted_io></code> and <code><unformatted_io></code> must be replaced by a specific procedure name referenced in the generic interface.

The dummy arguments' declarations and meaning are:

* <code>'''dtv'''</code>: Must be declared to be a nonpointer nonallocatable scalar of the type in question. If the type is extensible (to be explained later), the declaration must be polymorphic (i.e. using <code>CLASS</code>), otherwise non-polymorphic (using <code>TYPE</code>). Its <code>INTENT</code> must be <code>in</code> for <code>WRITE(...)</code>, and "<code>out</code>" or "<code>inout</code>" for <code>READ(...)</code>. It represents the object on which data transfer statements are to be executed.   <small>Note: For the examples in this chapter, we need to use <code>CLASS</code>, but the behaviour is as if <code>TYPE</code> were used, as long as the actual arguments are non-polymorphic and the procedure-based interface is used for the invocation.</small>
* <code>'''unit'''</code>: An <code>INTEGER</code> scalar with <code>INTENT(in)</code>. Its value is that of the unit used for data transfer statements. Use of other unit values is not permitted (except, perhaps, <code>error_unit</code> for debugging purposes).
* '''<code>iotype</code>''': A <code>CHARACTER(len=*)</code> string with <code>INTENT(in)</code>. This can only appear in procedures for formatted I/O. The following table describes how the incoming value relates to the parent I/O transfer statement:

{| class="wikitable"
!Value
!Caused by parent I/O statement
|-
|<code>"LISTDIRECTED"</code>
|<code>WRITE(unit, fmt=*) my_list</code>
|-
|<code>"NAMELIST"</code>
|<code>WRITE(unit, nml=my_namelist)</code>
'''Note:''' Referring to the example, at least one <code>sorted_list</code> object must be a member of <code>my_namelist</code>.
|-
|<code>"DTsorted_list_fmt"</code>
|<code>WRITE(unit, fmt='(DT"sorted_list_fmt"(10,2))') my_list</code> 
'''Note:''' <code>DT</code> is the "derived type" edit descriptor that is needed in format-driven editing to trigger execution of the UDDTIO routine. The string following the <code>DT</code> edit descriptor can be freely chosen (even to be zero length); it is recommended that the UDDTIO procedure pay attention to any possible values supplied in the parent I/O statement if it supports DT editing.
|}

* <code>'''v_list'''</code>: A rank-1 assumed-shape <code>INTEGER</code> array with <code>INTENT(in)</code> . This can only appear in procedures for formatted I/O. The incoming value is taken from the final part of the <code>DT</code> edit descriptor; in the example from the table above it would have the value [10,2]. Free use can be made of the value for the disposition (formatting, controlling) of I/O transfer statements inside the procedure. The array's size may be zero; specifically, it will be of size zero for the listdirected or namelist cases.
* <code>'''iostat'''</code>: An <code>INTEGER</code> scalar with <code>INTENT(out)</code>. It must be given a value consistent with those produced by non-UDTTIO statements in case of an error. Successful execution of the I/O must result in a zero value. Unsuccessful execution must result in either a positive value, or one of the values <code>iostat_end</code> or <code>iostat_eor</code> from the <code>iso_fortran_env</code> intrinsic module.
* <code>'''iomsg'''</code>: A <code>CHARACTER(len=*)</code> string with <code>INTENT(inout)</code>. It must be given a value if a non-zero <code>iostat</code> is returned.
Additional properties and restrictions for UDDTIO are:

* All data transfers are executed in non-advancing mode. Any <code>advance=</code> specifier will be ignored;
* asynchronous I/O is not supported;
* Inside the user-defined routine, no file positioning statements are permitted.

The following demonstrates a partial implementation of formatted writing on <code>sorted_list</code> objects:<syntaxhighlight lang="fortran">
RECURSIVE SUBROUTINE write_fmt_list(dtv, unit, iotype, v_list, iostat, iomsg)
   CLASS(sorted_list), INTENT(in) :: dtv
   INTEGER, INTENT(in) :: unit, v_list(:)
   CHARACTER(len=*), INTENT(in) :: iotype
   INTEGER, INTENT(out) :: iostat
   CHARACTER(len=*), INTENT(inout) :: iomsg
      
   CHARACTER(len=2) :: next_component
      
   IF ( associated(dtv%next) ) THEN
      WRITE(next_component, fmt='("T,")') 
   ELSE
      WRITE(next_component, fmt='("F")') 
   END IF
   SELECT CASE (iotype)
   CASE ('LISTDIRECTED')
      WRITE(unit, fmt=*, delim='quote', iostat=iostat, iomsg=iomsg) &
            dtv%data%string
   CASE ('NAMELIST')
      WRITE(unit, fmt=*, iostat=iostat, iomsg=iomsg) '"', &
            dtv%data%string, '",', trim(next_component)
   CASE default
      iostat = 129
      iomsg = 'iotype ' // trim(iotype) // ' not implemented'
      RETURN
   END SELECT
   IF ( associated(dtv%next) ) THEN
      CALL write_fmt_list(dtv%next, unit, iotype, v_list, iostat, iomsg)
   END IF
END SUBROUTINE
</syntaxhighlight>'''Notes:'''

* The namelist itself is inaccessible from the procedure; it is not needed since the procedure only needs to write the list values in a suitably formatted way. Termination of the list is indicated by a final logical value of 'F' in the list entry of the namelist file; the termination information must be appropriately processed in the corresponding namelist case of the read procedure.
* The example implementation does not support <code>DT</code> editing; invoking the parent I/O statement from the above table would therefore cause error termination unless an <code>iostat=</code> argument is added to it.
== Object-oriented programming techniques ==

=== Introduction: Establishing an explicit relationship between types ===
The discussion on object-based program design in the previous chapter was based on creating derived types that are comprised of objects of other types (intrinsic or derived); this is also known as '''type''' '''composition''' (not a Fortran term). For object-oriented programming, the approach is that a closer relationship between two (or maybe more) types can be established through  language-defined mechanisms, on both the levels of type definition and object declaration and use. Fortran supports a '''single inheritance''' model, which will be outlined in the following sections; runnable example codes are supplied in the <code>object_oriented</code> subfolder of the [https://github.com/reinh-bader/object_fortran Github repository]

=== Extension types ===
As a starting point, consider the definition of a type, an object of which can quite generally represent a physical body:<syntaxhighlight lang="fortran">
TYPE :: body
   REAL :: mass
   REAL :: pos(3), vel(3)
END TYPE  
:
TYPE(body) :: my_basketball = body(1.5, [0.0, 0.0, 2.0], [10.0, 0.0, 0.0])
</syntaxhighlight>This might come along with procedures that impose a momentum change or a change of mass on a <code>body</code> object:<syntaxhighlight lang="fortran">
PURE SUBROUTINE kick(a_body, dp)
   TYPE(body), INTENT(inout) :: a_body
   REAL, intent(in) :: dp(3)

   a_body%vel(:) = a_body%vel(:) + dp(:) / a_body%mass 
END SUBROUTINE 
PURE SUBROUTINE accrete(a_body, dm)
   TYPE(body), INTENT(inout) :: a_body
   REAL, intent(in) :: dm
   
   a_body%mass = a_body%mass + dm
END SUBROUTINE accrete


</syntaxhighlight>After writing lots of code that makes use of the above, imagine that you now want to deal with objects that have the additional property of electric charge. One could, of course, simply add another component to the original <code>body</code> type, but in most cases this would invalidate existing code which would need to be corrected, recompiled and retested. Furthermore, all <code>body</code> objects would require the extra memory, which for the existing codebase would simply be wasted. It is more convenient and less intrusive to create a new type that is an '''extension''' of the existing one (the '''parent''' type):<syntaxhighlight lang="fortran">
TYPE, EXTENDS(body) :: charged_body
   REAL :: charge
END TYPE
</syntaxhighlight>An object of this type<syntaxhighlight lang="fortran">
TYPE(charged_body) :: a_proton
</syntaxhighlight>would then have the following type components:

* <code>a_proton%mass</code>
* <code>a_proton%pos</code>
* <code>a_proton%vel</code>

that are '''inherited''' from the parent type, and the additional type component

* <code>a_proton%charge</code>

that was added in the definition of <code>charged_body</code>. Furthermore, it is also possible to reference that part of the object corresponding to the parent type, which is a subobject of just that type:

* <code>a_proton%body</code>

Correspondingly, there are various manners in which the default structure constructor can be used to create a defined value:<syntaxhighlight lang="fortran">
TYPE(body) :: a_mutilated_proton

! Construct a_proton
a_proton = charged_body(mass=1.672E-27, pos=[0.0, 0.0, 0.0], &
                        vel=[0.0 ,0.0, 0.0]), charge=1.602E-19)

! Alternative construction with the same result
a_mutilated_proton = body(mass=1.672E-27, pos=[0.0, 0.0, 0.0], &
                          vel=[0.0, 0.0, 0.0])
                          
a_proton = charged_body(body=a_mutilated_proton, charge=1.602E-19)
</syntaxhighlight>Any derived type that does not have the <code>SEQUENCE</code> or <code>BIND(C)</code> attributes can be extended in the above manner; specifically, an extension type can itself be extended. For any given "base" type this gives rise to a potential hierarchy of types that can be represented by a directed acyclical graph:
[[File:Inheritance diagram.svg|border|744x744px]]

An object of type <code>body</code> is '''type compatible''' with both <code>a_proton</code> and <code>a_mutilated_proton</code>, so any of these two can, for example, appear in a call to the procedure <code>kick</code>.

=== Polymorphism ===

==== Declaring entities with <code>CLASS</code> ====
By declaring an object with the <code>CLASS</code> instead of the <code>TYPE</code> specifier, is is possible to defer the actual type that an object has to be determined when the program executes, or even have the actual type change during program execution. Such an object is designated as being '''polymorphic'''. To be polymorphic, an object must fulfill one of the following prerequisites:

* it has the <code>POINTER</code> attribute,
* it has the <code>ALLOCATABLE</code> attribute, or
* it is a dummy argument (with or without a <code>POINTER</code> or <code>ALLOCATABLE</code> attribute).

For example, the typed alllocation statement executed on a polymorphic allocatable object<syntaxhighlight lang="fortran">
CLASS(body), ALLOCATABLE :: a_polymorphic_body
:
ALLOCATE( charged_body :: a_polymorphic_body )
</syntaxhighlight>causes the object <code>a_polymorphic_body</code> that has the '''declared''' type <code>body</code> to be allocated with the '''dynamic''' type <code>charged_body</code>; in Fortran nomenclature, the latter term denotes what was referred to above as "actual" type.   

<small>For an unallocated allocatable or a disassociated pointer the dynamic type is considered to be the same as the declared type, although this is only useful in very few contexts that do not require the object to be allocated or associated.</small> 

==== Run-time type and class identification ====
Within the scope of the object's declaration, only the components of its declared type are accessible. Also, I/O operations on a polymorphic object are not permitted, unless UDDTIO routines have been defined. One way to obtain access to the complete object is to use a construct that permits '''run-time type identification''' (not a Fortran term), <code>SELECT TYPE</code>. For example, the I/O statements in<syntaxhighlight lang="fortran">
SELECT TYPE (a_polymorphic_body)
TYPE IS (body)
   WRITE(*,*) 'object of type body has value        ', a_polymorphic_body
TYPE IS (charged_body)
   WRITE(*,*) 'object of type charged_body has value', a_polymorphic_body
CLASS default
   ERROR STOP 'Type extension unsupported in this construct'
END SELECT
   
</syntaxhighlight>are permitted, since inside the block for each '''type guard''' the object is non-polymorphic and of the specified type. At most one type guard can match the object's type, and the corresponding statements are executed; otherwise the <code>CLASS default</code> section is executed (and the object remains polymorphic there). A disadvantage of using <code>SELECT TYPE</code> is that it needs to be appropriately updated whenever an additional type extension is defined; apart from the maintenance effort this also requires access to all source code that contain a relevant instance of the construct. For this reason, type-bound procedures (to be discussed) should be preferably used to gain access to additional type components.


For updates of the <code>charge</code> component of a <code>charged_body</code> object, one now could consider the following:<syntaxhighlight lang="fortran">
SUBROUTINE recharge(a_charged_body, dq)
   TYPE(charged_body), INTENT(inout) :: a_charged_body
   REAL, INTENT(in) :: dq
   
   a_charged_body%charge = a_charged_body%charge + dq
END SUBROUTINE
</syntaxhighlight>However, invoking this subroutine in the usual Fortran 95 style will not work for the variable <code>a_polymorphic_body</code>, since it violates the rule that the dummy argument's declared type must be type compatible with the actual argument's declared type. One can work around this by using a <code>SELECT TYPE</code> construct with '''run-time class identification''' (not a Fortran term), based on writing '''class guards''' instead of type guards:<syntaxhighlight lang="fortran">
SELECT TYPE (a_polymorphic_body)
CLASS IS (charged_body)  ! new declared type for a_polymorphic_body
   CALL recharge(a_polymorphic_body, dq=1.0e-5)
CLASS default
   WRITE(*,*) 'INFO: object a_polymorphic_body was not modified.'
END SELECT
   
</syntaxhighlight>The <code>recharge</code> procedure will then be invoked if the dynamic type of <code>a_polymorphic_body</code> is <code>charged_body</code> or an extension of it. The object remains polymorphic inside the class guard, only its declared type changes to that specified in the guard. Unless the "lifted" declared type of interest is already otherwise known from the context, or handling the <code>CLASS default</code> fall-through is straightforward, this is not in general a desirable way of dealing with class mismatches.

<small>It is permitted to mix type and class guards in a <code>SELECT TYPE</code> construct; in that case, a type guard has precedence over a class guard specifying the same type with respect to selection of the guarded statements to be executed.</small>

==== Unlimited polymorphic objects ====
A special case of polymorphism is that an object can be '''unlimited polymorphic'''. Such an object, declared with <code>CLASS(*)</code>, can be of any dynamic type (intrinsic type, extensible derived type, <code>SEQUENCE</code> or <code>BIND(C)</code> derived type), as illustrated by the following statements:<syntaxhighlight lang="fortran">
CLASS(*), ALLOCATABLE :: a_unlimited ! has no declared type, so any type is an extension

ALLOCATE( a_unlimited, source=2.5E4) ! dynamic type becomes real

SELECT TYPE ( a_unlimited )
TYPE IS (REAL)
   WRITE(*,*) 'a_unlimited is of intrinsic real type with value ', a_unlimited  
END SELECT

DEALLOCATE( a_unlimited )
ALLOCATE( a_unlimited, source=a_proton) ) ! dynamic type becomes charged_body

SELECT TYPE ( a_unlimited )
TYPE IS (charged_body)
   WRITE(*,*) 'a_unlimited is a charged_body with value ', a_unlimited  
END SELECT
</syntaxhighlight>Accessing the object's data ''always'' needs a <code>SELECT TYPE</code> construct; type guards in the construct can in this case might not only refer to extensible types, but also to intrinsic types. However, for <code>SEQUENCE</code> or <code>BIND(C)</code> derived types, no type resolution is possible - these always fall through to a <code>CLASS default</code> guard, if present; use of unlimited polymorphic objects to store values of such types is therefore considered unsafe. 



In this context, allocation with <code>source=</code> allocates the target object to the source object's dynamic type before copying its value to the target object. If the source object's data is not needed, <code>mold=</code> can be used instead. Sourced allocation becomes a powerful tool, since the dynamic type of the source object need not be known in the scoping unit within which the allocation is executed.



Type components with the <code>POINTER</code> or <code>ALLOCATABLE</code> attribute can be unlimited polymorphic, enabling the construction of generic and potentially inhomogeneous container-like types. As an illustration of this, a supporting type for the purpose of holding data targeted for manipulation of other objects is presented; its definition (placed in the module <code>mod_utility_types</code>) reads<syntaxhighlight lang="fortran">
TYPE :: any_object
   CHARACTER(len=:), ALLOCATABLE :: description
   CLASS(*), ALLOCATABLE :: value(:)
   INTEGER, ALLOCATABLE :: shape(:)
END TYPE

</syntaxhighlight>where <code>description</code> will refer to the property that needs updating, and <code>value</code> will contain the data to be used for the transaction. Because the <code>value</code> component should be able to represent any type, it is declared as being unlimited polymorphic. Because the <code>value</code> component might hold data needed to produce an array of arbitrary shape, the additional <code>shape</code> component is supplied, but its use is really only necessary if objects of rank at least 2 must be dealt with. The structure constructor for that type has been overloaded to work around compiler bugs and make handling of scalar data easier. The following example illustrates how to establish a simple interface for setting components of a structure: <syntaxhighlight lang="fortran">
MODULE mod_wtype
   USE mod_utility_types, ONLY : initialize => any_object

   TYPE :: wtype
      PRIVATE
      INTEGER :: nonzeros = -1
      REAL, ALLOCATABLE :: w(:,:)
   END TYPE wtype
CONTAINS
   SUBROUTINE setup_wtype(a_wtype, a_component)
      ! in-place setting to avoid memory bursts for large objects
      TYPE(wtype), INTENT(inout) :: a_wtype
      TYPE(initialize), INTENT(in), TARGET :: a_component
      
      INTEGER :: wsize
      REAL, POINTER :: pw(:,:)
      
      SELECT CASE (a_component%description)
      CASE ("nonzeros")
         IF ( allocated(a_component%value) ) THEN
            SELECT TYPE ( nonzeros => a_component%value(1) )
            TYPE IS (INTEGER)
               a_wtype%nonzeros = nonzeros
            END SELECT
         END IF
      CASE ("w")
         IF ( allocated(a_component%value) .AND. allocated(a_component%shape) ) THEN
            wsize = size(a_component%value)
            IF ( wsize >= product(a_component%shape) ) THEN
               SELECT TYPE ( w => a_component%value )
               TYPE IS (REAL)
                  pw(1:a_component%shape(1), 1:a_component%shape(2)) => w
                  a_wtype%w = pw 
               END SELECT
            END IF
         END IF
      END SELECT
   END SUBROUTINE setup_wtype
   :
END MODULE
</syntaxhighlight>'''Notes:'''
* Having this simple interface at the cost of significant additional setup code might at first sight appear frivolous; however, once type extension is used on a larger scale, setting or modifying further components in the conventional way becomes rather irksome without a concept like that above, especially if [[User:RBaSc/draft ftnoo#Type-bound procedures (TBP)|type-bound procedures]] with a simple ''and'' uniform interface must be implemented;
* The object <code>a_wtype</code> remains unchanged in case an unsuitable value is provided for <code>a_component</code>. One could add explicit error handling, but for these examples this is considered an unnecessary complication;
* The permitted values for the <code>initialize</code> object should be documented for each procedure that takes such an object;
* Because access to <code>a_component</code> within <code>SELECT TYPE</code> is via a type component, one is obliged to introduce an associate name for the latter. The language rules only permit omitting the associate name for named variables, and subobjects are not named variables;
* A '''rank-changing pointer assignment''' is used to transform the rank-1 <code>a_component%value</code> array to an object that can be assigned to a rank-2 <code>a_wtype%w</code> array; this works because the right-hand side is a rank-1 object; for rank-2 and higher the rank-changing pointer assignment will only work if the target assigned to is a '''simply contiguous array designator''' (a topic not covered here). Note that in this context, the <code>reshape</code> intrinsic cannot be used because it requires the size of its <code>shape</code> argument to be a constant.

The program invoking the <code>setup_wtype</code> procedure might do so as follows, to set up a <code>wtype</code> object:<syntaxhighlight lang="fortran">
   USE mod_wtype
   TYPE(initialize) :: c_nz, c_w
   TYPE(wtype) :: my_wtype
   INTEGER :: i, j
   INTEGER :: ndim 

   ndim = ...
   
   ASSOCIATE ( my_data => [ ((real (max(0, min(i-j+2, j-i+2))), j=1, ndim), i=1, ndim) ] )
      c_nz = initialize("nonzeros", count(my_data /= 0))
      c_w = initialize("w", my_data, [ ndim, ndim ] )
   END ASSOCIATE

   CALL setup_wtype(my_wtype, c_nz) 
   CALL setup_wtype(my_wtype, c_w)  
</syntaxhighlight>

=== Type-bound procedures (TBP) ===
To resolve the class mismatch issues arising from the use of polymorphic objects, one needs a language mechanism for making a run-time decision on a procedure invocation that depends on the dynamic type of a polymorphic object. This can be achieved by binding a procedure to a type in the type definition via a <code>PROCEDURE</code> statement in the type's <code>CONTAINS</code> part. 
For the type <code>body</code>, the augmented type definition reads<syntaxhighlight lang="fortran">
TYPE :: body
   REAL :: mass
   REAL :: pos(3), vel(3)
CONTAINS
   PROCEDURE :: update => update_body
END TYPE  

</syntaxhighlight>This does not impact how the structure constructor is used; for this, only the specifications before the <code>CONTAINS</code> statement are relevant. To establish a simple and uniform interface for object updates, the procedure <code>update_body</code> makes use of the <code>any_object</code> type discussed earlier, which in view of the context is locally renamed to <code>change</code>: <syntaxhighlight lang="fortran">
SUBROUTINE update_body(a_body, a_change)
   CLASS(body), INTENT(inout) :: a_body
   TYPE(change), INTENT(in) :: a_change
   IF ( allocated(a_change%description) .AND. allocated(a_change%value) ) THEN
     SELECT CASE ( trim(a_change%description) )
     CASE ('mass')
        SELECT TYPE ( delta => a_change%value(1) )
        TYPE IS (real)
           CALL accrete(a_body, delta) 
        END SELECT
     CASE ('momentum')
        SELECT TYPE ( delta => a_change%value )
        TYPE IS (real)
           IF ( size(delta) >= 3 ) CALL kick(a_body, delta(1:3))
        END SELECT
     CASE ('position')
        SELECT TYPE ( delta => a_change%value )
        TYPE IS (real)
           IF ( size(delta) >= 3) a_body%pos = a_body%pos + delta(1:3) 
        END SELECT
     END SELECT
   END IF
END SUBROUTINE
</syntaxhighlight>In its interface, the '''passed object''' <code>a_body</code> must be declared to be a polymorphic scalar, with its declared type being the one the procedure has been bound to. The implementation reuses existing code where possible (very simple in this example, but this is of course not generally the case), to avoid the need for extensive revalidation.


Invocation of the procedure could be done in the usual manner, but the preferred style, especially in the case that the actual argument is polymorphic, is to do it through the object itself:<syntaxhighlight lang="fortran">
TYPE(change) ::  dx
:
dx = change(description='mass', value=[0.0, 2.0, 0.0])

CALL my_basketball%update(dx) ! invokes update_body(my_basketball, dx)
</syntaxhighlight>For polymorphic objects, the procedure <code>update_body</code> will be invoked if the dynamic type of the object is <code>body</code> (this might not be true if the dynamic type is an extension, as we shall see).

<small>The invocation can also be done with non-polymorphic objects; in this case, the binding could (in principle)  be determined at compilation time, potentially saving some call overhead. Note that the passed object dummy is not permitted to be allocatable or a pointer, which facilitates this usage.</small>

So far this is not particularly interesting; the key thing is what happens once we turn to type extensions. For example, to enable modification of the <code>charge</code> component (in addition to that of other components) of an object of dynamic type <code>charged_body</code>, it is possible to '''override''' the parent type's bound procedure:<syntaxhighlight lang="fortran">
TYPE, EXTENDS(body) :: charged_body
   REAL :: charge
CONTAINS
   PROCEDURE :: update => update_charged_body
END TYPE
</syntaxhighlight>with the procedure defined as follows:<syntaxhighlight lang="fortran">
SUBROUTINE update_charged_body(a_body, a_change)
   CLASS(charged_body) :: a_body
   TYPE(change) :: a_change
   
   IF ( allocated(a_change%description) .AND. allocated(a_change%value) ) THEN
      SELECT CASE ( trim(a_change%description) )
      CASE ('charge')
         SELECT TYPE ( delta => a_change%value(1) )
         TYPE IS (real)
            a_body%charge = a_body%charge + delta
         END SELECT
      CASE default
         CALL a_body%body%update(a_change) 
         ! assure that a change to a parent component is dealt with
      END SELECT
   END IF
END SUBROUTINE
</syntaxhighlight>The overriding procedure must use the same interface as the overridden procedure, except that the passed object is declared to be of the extended type; even the argument keywords must be the same. Once the override has been defined, the call through an object of dynamic type <code>charged_body</code> will be dispatched to <code>update_charged_body</code>: <syntaxhighlight lang="fortran">
TYPE(change) ::  dc, dp
CLASS(body), ALLOCATABLE :: my_polymorphic_body

my_polymorphic_body = charged_body(mass=1.5, pos=[0.,0.,0.], &
                                   vel=[2.,0.,0.], charge=2.41E-5)
!  the above statement auto-allocates the left hand side
dc = change(description='charge', value=5.0E-6)
dp = change(description='momentum', value=[-1.0,1.0,0.0])

! both the following dispatch to update_charged_body
CALL my_polymorphic_body%update(dc) 
CALL my_polymorphic_body%update(dp) 
</syntaxhighlight>'''Notes:'''

* for the above example, direct invocation of the procedure <code>update_charged_body</code> is not possible (as already noted earlier);
* the second TBP call illustrates the invocation of the parent object update from <code>update_charged_body</code>. Without this, changes that impact the parent object would not be done. By implementing this consistency of behaviour, the programmer assures that the inheritance hierarchy adheres to the [[Liskov substitution principle]];
* to enforce using the TBP calls in a use association context, the module procedures that implement them can be made <code>PRIVATE</code>. The accessibility of the TBP itself is determined by the attribute for it (default is <code>PUBLIC</code>) in the type definition;
* the programmer can prevent overriding of a binding by declaring it to be <code>NON_OVERRIDABLE</code>; its implementation then is regarded as valid for all conceivable extension types.

=== Abstract types and interfaces ===
The <code>sortable</code> type used for demonstrating the <code>sortable_list</code> functionality in the [[User:RBaSc/draft ftnoo#Object-based features and programming techniques|object-based chapter's]] example was set up as a fixed container-like type. It is desirable to be able to use the list machinery more flexibly i.e., for any type that supports the "less-than" comparison. This can be achieved by introducing an '''abstract type'''<syntaxhighlight lang="fortran">
TYPE, ABSTRACT :: sortable
CONTAINS
   PROCEDURE(compare), DEFERRED :: less_than 
   ! ... more to follow
END TYPE
</syntaxhighlight>with a '''deferred binding'''. It is not possible to create an object whose dynamic type is abstract, or a non-polymorphic object of abstract type. For this reason, the deferred binding cannot represent an existing procedure, but is characterized by an '''abstract interface''':<syntaxhighlight lang="fortran">
ABSTRACT INTERFACE
   PURE LOGICAL FUNCTION compare(s1, s2)
      IMPORT :: sortable
      CLASS(sortable), INTENT(in) :: s1, s2 
      ! dispatch is via the first argument
   END FUNCTION
END INTERFACE
   
</syntaxhighlight>The <code>IMPORT</code> statement is required to give the interface access to the type defined in its host. Furthermore, an override of the structure constructor will be needed <syntaxhighlight lang="fortran">
INTERFACE sortable
   PROCEDURE :: create_sortable
END INTERFACE
</syntaxhighlight>that permits creation of polymorphic <code>sortable</code> objects. The details of this will be described later (since, indeed, a devil lurks in these details). Note that the above combined use of abstract types and interfaces is also known under the (non-Fortran) term '''interface class'''. 

This framework permits the programmer to implement the following programming technique, which is also known as '''dependency inversion''' (not a Fortran term): 

# Any machinery that makes use of polymorphic <code>sortable</code> objects is made to only refer to the above abstractions. For example, the definition of the <code>sorted_list</code> type could be adapted to read<syntaxhighlight lang="fortran">
TYPE, PUBLIC :: sorted_list
   PRIVATE
   CLASS(sortable), ALLOCATABLE :: data 
   ! changed to refer to abstract type
   TYPE(sorted_list), POINTER :: next => null()
CONTAINS
   FINAL :: delete_sorted_list
END TYPE
</syntaxhighlight>The advantage of this is that no change to the preexisting machinery will be needed whenever a programmer decides to add an extension type as outlined in 2. below.
# For a concrete realization of a <code>sortable</code> object, the programmer needs to create a type extension, for example<syntaxhighlight lang="fortran">
TYPE, PUBLIC, EXTENDS(sortable) :: sortable_string
   CHARACTER(len=:), ALLOCATABLE :: string
CONTAINS
   PROCEDURE :: less_than => less_than_string
END TYPE
</syntaxhighlight>including an ''obligatory'' implementation <code>less_than_string</code> of an overriding TBP for the deferred binding. The constructor function (promised earlier, but not yet delivered) also needs to be updated to enable creation of objects of the extended type.

=== Generic type-bound procedures and operator overloading ===
As a convenience, use of an overloading for the comparison operator "<" can be provided by creating a '''generic''' type-bound procedure:<syntaxhighlight lang="fortran">
TYPE, ABSTRACT :: sortable
CONTAINS
   PROCEDURE(compare), DEFERRED :: less_than
   GENERIC :: OPERATOR(<) => less_than
END TYPE
</syntaxhighlight>which means that when a statement involving a comparison expression <syntaxhighlight lang="fortran">
CLASS(sortable), ALLOCATABLE :: s1, s2

s1 = sortable( ... )
s2 = sortable( ... )

IF ( s1 < s2 ) THEN
   ...
END IF
</syntaxhighlight>is executed, the overridden type-bound procedure bound to the first operand will be invoked to evaluate the expression. It is not necessary to re-specify the <code>GENERIC</code> clause in any type extensions; the dispatch will automatically select the overridden procedure. 

Named generic type-bound procedures that do not overload existing operations can also be defined; an example for this is given in the section "[[User:RBaSc/draft ftnoo#Functions with parameters|Functions with parameters]]". The rules for generic resolution work similar as for nonpolymorphic generic procedure interfaces, with the additional restriction that polymorphic dummy arguments that are related by inheritance cannot be distinguished for the purpose of compile-time resolution to a specific procedure.  

=== Completing the dependency inversion ===

==== Discussion of structural dependencies ====
When implementing the above concept, typically a separate module, say <code>mod_sortable_extensions</code>, is created for some or all of the extension types of <code>sortable</code>. The motivations for this can be: 

* avoid recompilation of any machinery that makes use of the <code>mod_sortable</code> module;
* the source code of <code>mod_sortable</code> might not be readily modifiable; 
* prevent <code>mod_sortable</code> from turning into a monster module in case large concepts are implemented through extension types, or many extension types are created.

The implementation of the constructor will need to use associate <code>mod_sortable_extensions</code> since it needs to be able to create objects of the types defined there. On the other hand, the interface to the constructor needs to be visible in <code>mod_sortable</code>, since the machinery that depends on it must be able to call it. As a consequence, one would end up with a circular <code>USE</code> dependency between the two modules, which is prohibited. 
==== Using submodules to break dependency cycles ====
To deal with such a situation (among others), the concept of '''submodule''' is available. This is a type of program unit that serves as an extension to an existing module (or submodule), to which it has access by host association. Furthermore, submodules allow the programmer to separate interfaces from implementations; the former are defined in the parent program unit (i.e., the program unit of which the submodule is an extension), the latter in the submodule itself.

For the constructor function, the following interface block can be declared in <code>mod_sortable</code>:<syntaxhighlight lang="fortran">
INTERFACE
   MODULE FUNCTION create_sortable(init) RESULT(r)
      CLASS(sortable), ALLOCATABLE :: r
      TYPE(initialize), INTENT(in) :: init
   END FUNCTION
END INTERFACE
</syntaxhighlight>The special notation <code>MODULE FUNCTION</code> (or <code>MODULE SUBROUTINE</code> for a subroutine) tells the compiler that the implementation is deferred to a submodule.   

'''Notes:''' 

* the above interface requires no reference to any entities contained in <code>mod_sortable_extensions</code>;
* consistent with this, the variable representing the function result is an allocatable polymorphic object of the abstract type;
* an <code>IMPORT</code> statement is not obligatory in separate module procedure interfaces, although it is permitted (compiler support assumed!), primarily for the purpose of  fine-grain control of host access;
* the type <code>initialize</code> is, again, a renamed version of the <code>any_object</code> type referred to earlier.

==== Implementation of the constructor ====
The submodule containing the implementation then reads as follows:<syntaxhighlight lang="fortran">
SUBMODULE (mod_sortable) smod_constructor
CONTAINS
   MODULE PROCEDURE create_sortable
      USE mod_sortable_extensions, ONLY : sortable_string
      
      IF ( allocated(init%description) .AND. allocated(init%value) ) THEN
         SELECT CASE (init%description)
         CASE ('sortable_string')
            SELECT TYPE ( value => init%value(1) )
            TYPE IS (CHARACTER(len=*)) 
               ALLOCATE( r, source=sortable_string(value) )
            END SELECT
         END SELECT
      END IF
   END PROCEDURE
END SUBMODULE
</syntaxhighlight>'''Notes:'''

* The interface for the separate module procedures is omitted, since it can be deduced from its specification in the parent module. However, alternative syntax exists that replicates the interface (but this is not shown here);
* the effect of the <code>ONLY</code> clause is to suppress use access to any entity of the parent program unit (which would be indirectly established). This is because use association overrides host association, which may cause undesirable side effects;
* submodules additionally can contain specifications (before the <code>CONTAINS</code> statement), as well as local submodule procedures. All these are only accessible from the submodule (and its descendant submodules, if any);
* the naming scheme for a submodule always references the direct parent. For submodules of submodules, the scheme is <code>SUBMODULE (<parent module>:<parent submodule>) <submodule_name></code> and the names of submodules of a given module must  be unique. 

==== Diagramming the dependencies between program units ====

The following diagram shows the use and host association relationships between the modules (blue boxes), the submodule (green box), and a main program unit (orange box) for this example:[[File:Dependency inversion.svg|center|frame|Dependencies between program units implementing and using an interface class]]

The small triangles in the diagram refer to use ("u") association and host ("h") association, respectively. The separation of the constructor's interface from its implementation leads to avoidance of circular <code>USE</code> references (the lower two "u" triangles in the diagram).

The compilation order for separate files would be:

# <code>mod_sortable</code>
# <code>program</code> and <code>mod_sortable_extensions</code>, independently
# <code>smod_constructor</code>

== Performance and ease of use ==

=== Functions with parameters ===

==== A type definition for invocation of a general function ====
In scientific applications, a commonly occurring requirement is the need to evaluate functions that depend on additional parameters, apart from their real-valued argument. For example, an application might need the value of spherical Bessel function <math>x \mapsto j_l(q \, x) </math> for independently specified integer values of <math>l</math> and real values of <math>q</math>. More generally, one can consider a real-valued mapping

<math>\Re \ni x \mapsto f_\lambda(x) \quad (\lambda \in \Omega)</math>,

where the parameter value <math>\lambda</math> can be from some arbitrary set. This section presents a way for handling this programmatically, using the object-oriented features of Fortran. We start with the outline for a type definition of sufficient generality: <syntaxhighlight lang="fortran">
TYPE, PUBLIC :: pfunc_type
   PRIVATE
   PROCEDURE(pfunc), POINTER, NOPASS :: fp => null()
   : ! shown later
   CLASS(*), ALLOCATABLE :: param
CONTAINS
   : ! shown later
END type pfunc_type

ABSTRACT INTERFACE
   PURE REAL FUNCTION pfunc(x, param)
      REAL, INTENT(in) :: x
      CLASS(*), INTENT(in), OPTIONAL :: param
   END FUNCTION pfunc
END INTERFACE
</syntaxhighlight>It supplies  

* a '''procedure pointer''' component with an abstract interface that reflects the above mapping;
* an unlimited polymorphic parameter component, to keep all things in one place.

Notionally, one could invoke a properly set up <code>pfunc_type</code> object through<syntaxhighlight lang="fortran">
TYPE(pfunc_type) :: pfunc_obj
REAL :: x

pfunc_obj = pfunc_type(psin, 2) 
! definitions of procedure and data object discussed further below
x = ...

WRITE(*,*) 'Function value is ', pfunc_obj%fp(x, pfunc_obj%param)
</syntaxhighlight>Use of a procedure pointer reflects the fact that each <code>pfunc_type</code> object will want to associate its individual target function; this is sometimes also referred to as an '''object-bound procedure'''. The <code>NOPASS</code> attribute in the type definition is needed because otherwise (analogous to what we saw for the earlier type-bound procedure examples), the object through which the invocation  is done would be obliged to appear as a first argument in the abstract interface <code>pfunc</code>; this would constitute an additional imposition on the implementation of the supplied functions.  On the other hand, the invocation needs to explicitly specify the <code>param</code> component, making it a bit unwieldy; the use of <code>pfunc_type</code> objects will be simplified as we go on.

==== Performance issues arising from object-oriented programming ====
Let us look at a target function implementation, in form of a trivial example <math>\sin(\lambda x)</math>:<syntaxhighlight lang="fortran">
PURE REAL FUNCTION psin(x, param)
   REAL, INTENT(in) :: x
   CLASS(*), INTENT(in), OPTIONAL :: param
   REAL :: factor
   factor = 1.
   IF ( present(param) ) THEN
      SELECT TYPE ( param )
      TYPE IS (REAL)
         factor = param
      TYPE IS (INTEGER)
         factor = real(param)
      END SELECT
   END IF
   psin = sin(factor*x)
END FUNCTION psin
</syntaxhighlight>Given that an application is likely to request a large number of function values, the following effects would ensue once for each invocation:

* function call overhead, and
* overhead of run-time type resolution.

The resulting performance impact is typical for object-oriented designs that operate in multitudes on small objects. Making use of an array-based version of the function<syntaxhighlight lang="fortran">
PURE FUNCTION psin_array(x, param) RESULT(r)
   REAL, INTENT(in) :: x(:)
   REAL :: r(size(x))
   CLASS(*), INTENT(in), OPTIONAL :: param
   REAL :: factor
   factor = 1.
   IF ( present(param) ) THEN
      SELECT TYPE ( param )
      TYPE IS (REAL)
         factor = param
      TYPE IS (INTEGER)
         factor = real(param)
      END SELECT
   END IF
   r = sin(factor*x)  ! kernel
END FUNCTION psin_array
</syntaxhighlight>is desirable, since the overheads specified above only arise ''once'', and the actual calculational code (marked "kernel" in the above box) is amenable to array-related compiler optimizations (the specifics of which depend on both hardware architecture and  working set size). 

==== Completing the function type definition ====
The aim now is to proceed to a framework that permits to use both the scalar and the array versions in a uniform way, thereby making life for the clients that use the framework easy, while enabling performance where it is needed.

The full definition of <code>pfunc_type</code>, including its referenced abstract interfaces, reads<syntaxhighlight lang="fortran">
TYPE, PUBLIC :: pfunc_type
   PRIVATE
   PROCEDURE(pfunc), POINTER, NOPASS :: fp => null()
   PROCEDURE(pfunc_array), POINTER, NOPASS :: fp_array => null()
   CLASS(*), ALLOCATABLE :: param
CONTAINS
   PROCEDURE, PASS, PRIVATE, NON_OVERRIDABLE :: f_scalar, f_array
   GENERIC :: f => f_scalar, f_array
END type pfunc_type

ABSTRACT INTERFACE
   PURE REAL FUNCTION pfunc(x, param)
      REAL, INTENT(in) :: x
      CLASS(*), INTENT(in), OPTIONAL :: param
   END FUNCTION pfunc
   PURE FUNCTION pfunc_array(x, param) RESULT(r)
      REAL, INTENT(in) :: x(:)
      REAL :: r(size(x))
      CLASS(*), INTENT(in), OPTIONAL :: param
   END FUNCTION pfunc_array
END INTERFACE
</syntaxhighlight>Because we now have two procedure pointers in the type (only one of which is used in each given object), it is advantageous to provide a generic type-bound procedure <code>f</code> as a front end for ease of use. The specifics <code>f_scalar</code> and <code>f_array</code> for this read<syntaxhighlight lang="fortran">
REAL FUNCTION f_scalar(this, x)
   CLASS(pfunc_type), INTENT(in) :: this
   REAL, INTENT(in) :: x

   IF ( associated(this%fp) ) THEN
      f_scalar = this%fp(x, this%param)
   ELSE IF ( associated(this%fp_array) ) THEN
      ASSOCIATE ( f_array => this%fp_array([x], this%param) )
         f_scalar = f_array(1)
      END ASSOCIATE
   ELSE
      ERROR STOP 'pfunc_type callback: uninitialized object'
   END IF
END FUNCTION f_scalar
FUNCTION f_array(this, x) RESULT(r)
   CLASS(pfunc_type), INTENT(in) :: this
   REAL, INTENT(in) :: x(:)
   REAL :: r(size(x))

   ! Note that support for the scalar version is omitted here, since
   ! the procedure call overhead, including type resolution, would
   ! significantly impact performance.
   IF ( associated(this%fp_array) ) THEN
      r = this%fp_array(x, this%param)
   ELSE
      ERROR STOP 'pfunc_type callback: uninitialized object'
   END IF
END FUNCTION f_array
</syntaxhighlight>The only way to invoke one of these (in a use association context) is via the generic name, since the specific type-bound procedures have the <code>PRIVATE</code> attribute; note that <code>pfunc_type</code> is not designed for being extended. Disambiguation is by rank of <code>x</code>.

The structure constructor for the type is overloaded<syntaxhighlight lang="fortran">
INTERFACE pfunc_type
   MODULE PROCEDURE create_pfunc_type
   MODULE PROCEDURE create_pfunc_type_array
END INTERFACE pfunc_type
</syntaxhighlight>with the following specific functions:<syntaxhighlight lang="fortran">
TYPE(pfunc_type) FUNCTION create_pfunc_type(fp, param)
   PROCEDURE(pfunc) :: fp
   CLASS(*), INTENT(in), OPTIONAL :: param
   create_pfunc_type%fp => fp
   IF ( present(param) ) THEN
      ALLOCATE(create_pfunc_type%param, source=param)
   END IF
END FUNCTION create_pfunc_type
TYPE(pfunc_type) FUNCTION create_pfunc_type_array(fp_array, param)
   PROCEDURE(pfunc_array) :: fp_array
   CLASS(*), INTENT(in), OPTIONAL :: param
   create_pfunc_type_array%fp_array => fp_array
   IF ( present(param) ) THEN
      ALLOCATE(create_pfunc_type_array%param, source=param)
   END IF
END FUNCTION create_pfunc_type_array
</syntaxhighlight>Disambiguation is possible due to the sufficiently different interfaces of the procedure arguments.

==== Using the function type ====
With the already-shown implementations for the target functions <code>psin</code> and <code>psin_array</code>, using this framework is illustrated by the following:<syntaxhighlight lang="fortran">
TYPE(pfunc_type) :: pfunc_obj
REAL, PARAMETER :: piby4 = atan(1.0), &
    piby4_arr(4) = [ piby4, 2.*piby4, 3.*piby4, 4.*piby4 ]

pfunc_obj = pfunc_type(psin, 2.)
WRITE(*,*) pfunc_obj%f(piby4)
  
pfunc_obj = pfunc_type(psin)
WRITE(*,*) pfunc_obj%f(piby4)
  
pfunc_obj = pfunc_type(psin_array, 2.)
WRITE(*,*) pfunc_obj%f(piby4_arr)
</syntaxhighlight>Omitting a <code>param</code> in a constructor is fine, as long as the target functions cater for the dummy argument's  non-presence. 

<small>The framework's implementation makes use of the fact that an unallocated actual argument associated with an <code>OPTIONAL</code> dummy argument is considered not present. Once conditional expressions are implemented in compilers, the code will be appropriately reworked, since use of this feature is recommended against.</small>

=== Arrays of structures versus structures of arrays ===
Returning to our earlier example type body, the next idea would be to simulate the dynamics of a large ensemble of bodies. A procedure<syntaxhighlight lang="fortran">
SUBROUTINE propagate(bodies, delta_t, force_field)
   TYPE(body), INTENT(inout) :: bodies(:)
   REAL, INTENT(in) :: delta_t
   TYPE(field_type), INTENT(in) :: force_field
   :
END SUBROUTINE
</syntaxhighlight>might be supplied that modifies the components of all ensemble members, for example as follows:

* <code>%pos <math>\longrightarrow</math> %pos + delta_t * %vel</code>
* <code>%vel <math>\longrightarrow</math> %vel + delta_t * force / %mass</code>

where <code>force</code> results from evaluating <code>force_field</code> at the position of the ensemble member.

=== Comments on further language features ===

==== Variations on the passed object ====
All examples for type-bound procedures given up to now have the property that the invoking object itself is passed as the first argument to the bound procedure. However, this default behaviour can be modified by the programmer 

* either declaring the binding with a <code>PASS</code> attribute that references the specific (and of course appropriately declared) procedure argument the object of the bound type should be passed to,
* or declaring the binding with a <code>NOPASS</code> attribute, in which case the object is not (implicitly) passed to the procedure at all in a TBP invocation.



== References ==
<references />
__FORCETOC__

